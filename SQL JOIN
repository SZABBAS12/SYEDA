--Write a SQL statement to prepare a list with salesman name, customer name
--and their cities for the salesmen and customer who belongs to the same city.

SELECT s.name, c.name, c.city
FROM salesman AS s, customer AS c
WHERE s.city = c.city;

--Write a SQL statement to find the list of customers who appointed a salesman
--for their jobs who gets a commission from the company is more than 12%

SELECT c.cust_name AS "Customer Name",
c.city, s.name AS "Salesman", s.commission
FROM customer AS c
INNER JOIN salesman AS s
ON c.salesman_id=s.salesman_id
WHERE s.commission>.12;

--Write a SQL statement to find the list of customers who appointed a salesman
--for their jobs who does not live in the same city where their customer lives,
--and gets a commission is above 12%

SELECT c.cust_name AS "Customer Name", c.city, s.name AS "Salesman",
s.commission, s.city
FROM customer AS c
INNER JOIN salesman AS s
ON c.salesman_id=s.salesman_id
WHERE s.commission>.12
AND c.city != s.city; # AND c.city <> s.city

--Write a SQL statement to find the details of a order i.e. order number,
--order date, amount of order, which customer gives the order and which salesman
--works for that customer and how much commission he gets for an order.

SELECT o.ord_no,o.ord_date,o.purch_amt,
c.cust_name AS "Customer Name",
s.name AS "Salesman", s.commission
FROM orders AS o
INNER JOIN customer AS c
ON o.customer_id=c.customer_id
INNER JOIN salesman AS s
ON o.salesman_id=s.salesman_id;

--Write a SQL statement to make a join on the tables salesman, customer
--and orders in such a form that the same column of each table will appear once
--and only the relational rows will come.

SELECT *
FROM orders
NATURAL JOIN customer
NATURAL JOIN salesman;

--Write a SQL statement to make a list in ascending order for the customer
--who works either through a salesman or by own.

SELECT c.cust_name,c.city,
s.name AS "Salesman",s.city
FROM customer AS c
LEFT JOIN salesman AS s
ON c.salesman_id=s.salesman_id
order by c.customer_id;

--Write a SQL statement to make a list in ascending order for the salesmen
--who works either for one or more customer or not yet join under any of the customers.

SELECT c.cust_name,c.city,c.grade,
s.name AS "Salesman", s.city
FROM customer AS c
RIGHT JOIN salesman AS s
ON s.salesman_id=c.salesman_id
ORDER BY s.salesman_id;

Write a SQL statement to make a list for the salesmen who either work for
one or more customers or yet to join any of the customer. The customer may have
placed, either one or more orders on or above order amount 2000 and must have a
grade, or he may not have placed any order to the associated supplier.

SELECT c.cust_name,c.city,c.grade,
s.name AS "Salesman", s.city,o.ord_no,o.ord_date,o.purch_amt
FROM customer AS c
Right JOIN salesman AS s
ON s.salesman_id = c.salesman_id
LEFT JOIN orders AS o
ON o.salesman_id = c.salesman_id
WHERE o.purch_amt >= 2000
AND c.grade IS NOT NULL;

Write a SQL statement to make a report with customer name, city, order no.
order date, purchase amount for those customers from the existing list who
placed one or more orders or which order(s) have been placed by the customer
who is not on the list.

SELECT c.cust_name,c.city, o.ord_no,
o.ord_date,o.purch_amt AS "Order Amount"
FROM customer AS c
FULL OUTER JOIN orders AS o
ON c.customer_id=o.customer_id;

Write a SQL statement to make a cartesian product between salesman and customer
i.e. each salesman will appear for all customer and vice versa for that customer who belongs to a city

SELECT *
FROM salesman AS s
CROSS JOIN customer AS c;

Write a SQL query to display all the data from the item_mast,
including all the data for each item's producer company.

SELECT *
   FROM item_mast
   INNER JOIN company_mast
   ON item_mast.pro_com= company_mast.com_id;

 Write a SQL query to display the average price of items of each company,
 showing the name of the company

 SELECT AVG(PRO_PRICE),company_mast.com_name
 FROM item_mast
 INNER JOIN company_mast
 ON item_mast.pro_com = company_mast.com_id
 GROUP BY company_mast.com_name;

 Write a SQL query to display the names of the company whose products have
 an average price larger than or equal to Rs.350.

 SELECT AVG(pro_price), company_mast.com_name
   FROM item_mast INNER JOIN company_mast
   ON item_mast.pro_com= company_mast.com_id
   GROUP BY company_mast.com_name
   HAVING AVG(pro_price) >= 350;

Write a SQL query to display the name of each company along with the ID and
price for their most expensive product.

SELECT i.pro_name, i.pro_price, co.com_name
   FROM item_mast AS i
    INNER JOIN company_mast AS co
   ON i.pro_com = co.com_id
     AND A.pro_price =
     (
       SELECT MAX(i.pro_price)
         FROM item_mast AS i
         WHERE i.pro_com = co.com_id
     );

Write a query in SQL to find the names of departments where more than two employees are working.

SELECT emp_department.dpt_name
  FROM emp_details
     INNER JOIN emp_department
       ON emp_dept =dpt_code
        GROUP BY emp_department.dpt_name
          HAVING COUNT(*) > 2;
